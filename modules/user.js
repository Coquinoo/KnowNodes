// Generated by CoffeeScript 1.6.1
(function() {
  var BaseModule, User,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModule = require('./baseModule');

  module.exports = User = (function(_super) {

    __extends(User, _super);

    function User() {
      var _this = this;
      this.getUserByConnectionGUID = function(connectionGUID, _) {
        return User.prototype.getUserByConnectionGUID.apply(_this, arguments);
      };
      this.getUserByEmail = function(email, _) {
        return User.prototype.getUserByEmail.apply(_this, arguments);
      };
      this.getUserByKnownodeId = function(id, _) {
        return User.prototype.getUserByKnownodeId.apply(_this, arguments);
      };
      this.getUserByNodeId = function(id, _) {
        return User.prototype.getUserByNodeId.apply(_this, arguments);
      };
      User.__super__.constructor.call(this, null);
    }

    User.prototype.formatUser = function(usr) {
      var retVal;
      if (!usr) {
        return null;
      }
      retVal = {
        id: usr.id,
        KN_ID: usr.KN_ID,
        email: usr.email,
        firstName: usr.firstName,
        lastName: usr.lastName,
        gender: usr.gender,
        dateOfBirth: usr.dateOfBirth,
        displayName: usr.firstName + ' ' + usr.lastName,
        lastConnectionDate: usr.lastConnectionDate
      };
      return retVal;
    };

    User.prototype.getAllUsers = function(_) {
      var userList;
      userList = [];
      this.DB.User.all({
        limit: 10
      }, _).forEach_(_, function(_, currentUserObj) {
        return userList.push(currentUserObj);
      });
      return userList;
    };

    User.prototype.getUserByNodeId = function(id, _) {
      var usr;
      usr = this.DB.User.find(id, _);
      return this.formatUser(usr);
    };

    User.prototype.getUserByKnownodeId = function(id, _) {
      var usr;
      usr = this.DB.User.findOne({
        where: {
          KN_ID: id
        }
      }, _);
      return this.formatUser(usr);
    };

    User.prototype.getUserByEmail = function(email, _) {
      var usr;
      usr = this.DB.User.findOne({
        where: {
          email: email
        }
      }, _);
      return this.formatUser(usr);
    };

    User.prototype.saveNewUser = function(userData, _) {
      return this.DB.User.create(userData, _);
    };

    User.prototype.deleteUser = function(id, _) {
      var user;
      user = this.DB.User.find(id, _);
      return user.destroy(_);
    };

    User.prototype.getUserByConnectionGUID = function(connectionGUID, _) {
      var usr;
      usr = this.DB.User.findOne({
        where: {
          connectionGUID: connectionGUID
        }
      }, _);
      return this.formatUser(usr);
    };

    return User;

  })(BaseModule);

}).call(this);
