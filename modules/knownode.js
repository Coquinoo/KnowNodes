// Generated by CoffeeScript 1.6.1

/*
* User: Liad Magen
* Date: 16/01/13
* Time: 00:30
*
* Knownode module. for saving / retriving the knownodes
*
*/


(function() {
  var DBModule, Knownode, knownodeFile, relationModule, userModule,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  relationModule = require('./relation');

  userModule = require('./user');

  knownodeFile = require('./knownodeFiles');

  DBModule = require('./DBModule');

  module.exports = Knownode = (function(_super) {

    __extends(Knownode, _super);

    function Knownode(user) {
      Knownode.__super__.constructor.call(this, user);
      this.relation = new relationModule(user);
      this.currentModule = 'module/Knownode';
    }

    Knownode.prototype.getRelatedKnownodesToNodeId = function(nodeId, _) {
      var nodes, params, query, user;
      this.logger.logDebug(this.currentModule, "getRelatedKnownodesToNodeId " + nodeId);
      nodes = [];
      query = ['START firstNode=node({startNode})', 'MATCH (firstNode) -[:RELATED_TO]- (edge) -[:RELATED_TO]- (article) -[:CREATED_BY]- (articleUser),', '(edge) -[:CREATED_BY]- (edgeUser) ', 'WHERE article <> firstNode ', 'RETURN article, articleUser, edge, edgeUser'].join('\n');
      params = {
        startNode: nodeId
      };
      user = new userModule;
      this.neo4jDB.query(query, params, _).map_(_, function(_, item) {
        var articleUser, connectionUser;
        articleUser = user.formatUser(item.articleUser.data);
        articleUser.id = item.articleUser.id;
        item.article.data.id = item.article.id;
        item.article.data.user = articleUser;
        connectionUser = user.formatUser(item.edgeUser.data);
        connectionUser.id = item.edgeUser.id;
        item.edge.data.id = item.edge.data.id;
        item.edge.data.user = connectionUser;
        return nodes.push({
          article: item.article.data,
          connection: item.edge.data
        });
      });
      return nodes;
    };

    Knownode.prototype.getRelatedKnownodesToKnowNodeId = function(knownodeId, _) {
      var node;
      this.logger.logDebug(this.currentModule, "getRelatedKnownodesToKnowNodeId " + knownodeId);
      node = this.getKnownodeByKnownodeId(knownodeId, _);
      return this.getRelatedKnownodesToNodeId(node.id, _);
    };

    Knownode.prototype.getUserKnownodes = function(_) {
      var params, query;
      this.logger.logDebug(this.currentModule, 'getUserKnownodes');
      query = ['START user=node({userId})', 'MATCH (knownode) -[:CREATED_BY]-> (user)', 'RETURN knownode'].join('\n');
      params = {
        userId: this.user.id,
        conceptType: this.DB.getPostTypes().concept
      };
      return this.neo4jDB.query(query, params, _);
    };

    Knownode.prototype.getKnownodeByKnownodeId = function(knownodeId, _) {
      var knownode, params;
      this.logger.logDebug(this.currentModule, "getKnownodeByKnownodeId " + knownodeId);
      params = {
        where: {
          KN_ID: knownodeId
        }
      };
      knownode = this.DB.Post.all(params, _);
      if (knownode.length > 0) {
        return knownode[0];
      } else {
        return null;
      }
    };

    Knownode.prototype.createNewKnownode = function(knownodeData, _) {
      var knownode;
      this.logger.logDebug(this.currentModule, 'createNewKnownode');
      knownode = this.DB.Post.create(knownodeData, _);
      this.relation.createOwnerRelationshipToNode(knownode, _);
      return knownode;
    };

    Knownode.prototype.createNewKnownodeWithRelation = function(existingNodeId, relationData, newKnownodeData, _) {
      var edge, existingNode, knownode;
      this.logger.logDebug(this.currentModule, "createNewKnownodeWithRelation " + existingNodeId);
      knownode = this.createNewKnownode(newKnownodeData, _);
      existingNode = this.getKnownodeByKnownodeId(existingNodeId, _);
      edge = this.relation.addKnownodeEdge(existingNode, relationData, knownode, _);
      knownode.edge = edge;
      return knownode;
    };

    Knownode.prototype.destroy = function(id, _) {
      var kn_File, knownode, params, query;
      this.logger.logDebug(this.currentModule, "destroy " + id);
      query = ['START user=node({userId}), n=node({nodeId})', 'MATCH ()-[r]-n-[:CREATED_BY]-(user)', 'RETURN n'].join('\n');
      console.log('user is' + this.user.id);
      params = {
        userId: this.user.id,
        nodeId: id
      };
      knownode = this.neo4jDB.query(query, params, _);
      console.log("Deleting file " + knownode.fileId);
      kn_File = new knownodeFile(this.user);
      kn_File.deleteFile(knownode.fileId, _);
      console.log("File deleted");
      return query = ['START user=node({userId}), n=node({nodeId})', 'MATCH ()-[r]-n-[:CREATED_BY]-(user)', 'DELETE n'].join('\n');
    };

    return Knownode;

  })(DBModule);

}).call(this);
