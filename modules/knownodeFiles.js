// Generated by CoffeeScript 1.6.1

/*
* User: Liad Magen
* Date: 11/02/13
* Time: 17:15
*
* Knownode files module. for saving / retriving the file articles for knownode from MongoDB
*
*/


(function() {
  var DBModule, KnownodeFiles, config, mongoose, postSchema, userModule,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  userModule = require('./user');

  mongoose = require('mongoose');

  postSchema = require('../DB/PostSchema');

  config = require('../config/DB.conf');

  DBModule = require('./DBModule');

  module.exports = KnownodeFiles = (function(_super) {

    __extends(KnownodeFiles, _super);

    function KnownodeFiles(user) {
      var _this = this;
      this.deleteFile = function(id, _) {
        return KnownodeFiles.prototype.deleteFile.apply(_this, arguments);
      };
      this.getFile = function(id, _) {
        return KnownodeFiles.prototype.getFile.apply(_this, arguments);
      };
      this.saveFile = function(files, params, _) {
        return KnownodeFiles.prototype.saveFile.apply(_this, arguments);
      };
      KnownodeFiles.__super__.constructor.call(this, user);
      this.currentModule = 'module/KnownodeFiles';
    }

    KnownodeFiles.prototype.initDB = function(callback) {
      var db, dbURL, opts;
      this.logger.logDebug(this.currentModule, 'initDB');
      opts = {
        server: {
          auto_reconnect: false,
          user: config.getDBDetails('mongoDB').user,
          pass: config.getDBDetails('mongoDB').pass
        }
      };
      dbURL = config.getDBURL('mongoDB').url;
      mongoose.connect(dbURL, opts);
      db = mongoose.connection;
      db.on('error', function(err) {
        return this.logger.logError(this.currentModule, err);
      });
      try {
        mongoose.connection.close();
        callback(err);
      } catch (error) {
        this.logger.logError(this.currentModule, error);
        callback(error);
      }
      return db.once('open', function() {
        var Post;
        console.log('db is open');
        Post = db.model('Post', postSchema);
        console.log('sending Post');
        return callback(null, Post);
      });
    };

    KnownodeFiles.prototype.saveFile = function(files, params, _) {
      var Post, opts, post;
      this.logger.logDebug(this.currentModule, 'saveFile');
      Post = this.initDB(_);
      this.logger.logDebug(this.currentModule, 'post initialized');
      post = new Post({
        fileURL: params.url,
        fileName: files.uploadedFile.name,
        abstract: params.bodyText,
        title: params.title,
        meta: {
          uploaderId: this.user.id,
          uploaderEmail: this.user.email,
          size: files.uploadedFile.size
        }
      });
      opts = {
        content_type: files.uploadedFile.type
      };
      post.addFile(files.uploadedFile, opts, _);
      mongoose.connection.close();
      return post;
    };

    KnownodeFiles.prototype.getFile = function(id, _) {
      var Post, post;
      this.logger.logDebug(this.currentModule, "getFile " + id);
      Post = this.initDB(_);
      post = new Post();
      return post.getFile(id, _);
    };

    KnownodeFiles.prototype.deleteFile = function(id, _) {
      var Post, post;
      this.logger.logDebug(this.currentModule, "deleteFile " + id);
      Post = this.initDB(_);
      post = new Post();
      return post.deleteFile(id, _);
    };

    return KnownodeFiles;

  })(DBModule);

}).call(this);
