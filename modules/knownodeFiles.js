/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; (function() {











  var BaseModule, KnownodeFiles, config, mongoose, postSchema, userModule, __bind = function(fn, me) {
    return function() { return fn.apply(me, arguments); };
  }, __hasProp = { }.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) { child[key] = parent[key]; }; }; function ctor() { this.constructor = child; }; ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModule = require("./baseModule");

  userModule = require("./user");

  mongoose = require("mongoose");

  postSchema = require("../DB/PostSchema");

  config = require("../config/DB.conf");

  module.exports = KnownodeFiles = (function(_super) {

    __extends(KnownodeFiles, _super);

    function KnownodeFiles(user) {
      this.deleteFile = __bind(this.deleteFile, this);

      this.getFile = __bind(this.getFile, this);

      this.saveFile = __bind(this.saveFile, this);
      KnownodeFiles.__super__.constructor.call(this, user); };


    KnownodeFiles.prototype.initDB = function(callback) {
      var db, dbURL, opts;
      opts = {
        server: {
          auto_reconnect: false,
          user: config.getDBDetails("mongoDB").user,
          pass: config.getDBDetails("mongoDB").pass } };


      dbURL = config.getDBURL("mongoDB").url;
      mongoose.connect(dbURL, opts);
      db = mongoose.connection;
      db.on("error", function(err) {
        try {
          mongoose.connection.close();
          return callback(err);
        } catch (error) {
          console.log(error);
          return callback(error); }; });


      return db.once("open", function() {
        var Post;
        console.log("db is open");
        Post = db.model("Post", postSchema);
        console.log("sending Post");
        return callback(null, Post); }); };



    KnownodeFiles.prototype.saveFile = function KnownodeFiles_prototype_saveFile__1(files, params, _) { var Post, opts, post, __this = this; var __frame = { name: "KnownodeFiles_prototype_saveFile__1", line: 71 }; return __func(_, this, arguments, KnownodeFiles_prototype_saveFile__1, 2, __frame, function __$KnownodeFiles_prototype_saveFile__1() {

        return __this.initDB(__cb(_, __frame, 2, 13, function ___(__0, __1) { Post = __1;
          console.log("post initialized");
          post = new Post({
            fileURL: params.url,
            fileName: files.uploadedFile.name,
            abstract: params.bodyText,
            title: params.title,
            meta: {
              uploaderId: __this.user.id,
              uploaderEmail: __this.user.email,
              size: files.uploadedFile.size } });


          opts = {
            content_type: files.uploadedFile.type };

          return post.addFile(files.uploadedFile, opts, __cb(_, __frame, 18, 6, function __$KnownodeFiles_prototype_saveFile__1() {
            mongoose.connection.close();
            return _(null, post); }, true)); }, true)); }); };


    KnownodeFiles.prototype.getFile = function KnownodeFiles_prototype_getFile__2(id, _) { var Post, post, __this = this; var __frame = { name: "KnownodeFiles_prototype_getFile__2", line: 94 }; return __func(_, this, arguments, KnownodeFiles_prototype_getFile__2, 1, __frame, function __$KnownodeFiles_prototype_getFile__2() {

        return __this.initDB(__cb(_, __frame, 2, 13, function ___(__0, __1) { Post = __1;
          post = new Post();
          return post.getFile(id, __cb(_, __frame, 4, 13, _, true)); }, true)); }); };


    KnownodeFiles.prototype.deleteFile = function KnownodeFiles_prototype_deleteFile__3(id, _) { var Post, post, __this = this; var __frame = { name: "KnownodeFiles_prototype_deleteFile__3", line: 101 }; return __func(_, this, arguments, KnownodeFiles_prototype_deleteFile__3, 1, __frame, function __$KnownodeFiles_prototype_deleteFile__3() {

        return __this.initDB(__cb(_, __frame, 2, 13, function ___(__0, __1) { Post = __1;
          post = new Post();
          return post.deleteFile(id, __cb(_, __frame, 4, 13, _, true)); }, true)); }); };


    return KnownodeFiles;

  })(BaseModule);

}).call(this);