/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; (function() {











  var BaseModule, Comment, __hasProp = {
  }.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) { child[key] = parent[key]; }; }; function ctor() { this.constructor = child; }; ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModule = require("./baseModule");

  module.exports = Comment = (function(_super) {

    __extends(Comment, _super);

    function Comment(user) {
      Comment.__super__.constructor.call(this, user); };


    Comment.prototype.getAllComments = function Comment_prototype_getAllComments__1(nodeId, _) { var params, query, __this = this; var __frame = { name: "Comment_prototype_getAllComments__1", line: 27 }; return __func(_, this, arguments, Comment_prototype_getAllComments__1, 1, __frame, function __$Comment_prototype_getAllComments__1() {

        query = ["START root=node({nodeId})","MATCH (comment) -[:COMMENT_OF]-> (root)","RETURN knownode",].join("\n");
        params = {
          nodeId: nodeId,
          conceptType: __this.DB.getPostTypes().concept };

        return __this.neo4jDB.query(query, params, __cb(_, __frame, 7, 13, _, true)); }); };


    Comment.prototype.createNewComment = function Comment_prototype_createNewComment__2(commentData, commentedOnNode, _) { var comment, properties, __this = this; var __frame = { name: "Comment_prototype_createNewComment__2", line: 37 }; return __func(_, this, arguments, Comment_prototype_createNewComment__2, 2, __frame, function __$Comment_prototype_createNewComment__2() {

        return __this.DB.Comment.create(commentData, __cb(_, __frame, 2, 16, function ___(__0, __1) { comment = __1;
          __this.relation.createOwnerRelationship(comment);
          properties = {
            creationDate: new Date() };

          return commentedOnNode.createRelationshipTo(commentedOnNode, comment, "COMMENT_OF", properties, __cb(_, __frame, 7, 6, function __$Comment_prototype_createNewComment__2() {
            return _(null, comment); }, true)); }, true)); }); };


    return Comment;

  })(BaseModule);

}).call(this);