// Generated by CoffeeScript 1.6.1

/*
* User: Liad Magen
* Date: 05/02/13
* Time: 12:43
*
* comments module. for adding / editing the comments of knownodes and relations
*
*/


(function() {
  var BaseModule, Comment, DBModule, relationModule, userModule,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModule = require('./baseModule');

  relationModule = require('./relation');

  userModule = require('./user');

  DBModule = require('./DBModule');

  module.exports = Comment = (function(_super) {

    __extends(Comment, _super);

    function Comment(user) {
      var _this = this;
      this.createNewComment = function(commentData, commentedObjectId, _) {
        return Comment.prototype.createNewComment.apply(_this, arguments);
      };
      Comment.__super__.constructor.call(this, user);
      this.relation = new relationModule(user);
      this.currentModule = 'module/Comment';
    }

    Comment.prototype.queryAndFormatCommentResults = function(query, queryParams, _) {
      var comments, user;
      this.logger.logDebug(this.currentModule, "queryAndFormatCommentResults " + query);
      user = new userModule;
      comments = [];
      this.neo4jDB.query(query, queryParams, _).map_(_, function(_, item) {
        var commentUser;
        commentUser = user.formatUser(item.commentUser.data);
        commentUser.id = item.commentUser.id;
        item.comment.data.id = item.comment.id;
        item.comment.data.user = commentUser;
        return comments.push(item.comment.data);
      });
      return comments;
    };

    Comment.prototype.getAllComments = function(nodeId, _) {
      var params, query;
      this.logger.logDebug(this.currentModule, "getAllComments " + nodeId);
      query = ['START root=node({nodeId})', 'MATCH (root) <-[r:COMMENT_OF*]- (comment) -[u:CREATED_BY]-> (commentUser)', 'RETURN comment, r, commentUser'].join('\n');
      params = {
        nodeId: nodeId
      };
      return this.queryAndFormatCommentResults(query, params, _);
    };

    Comment.prototype.getAllCommentsOfKnownodeID = function(knownodeId, _) {
      var query, queryParams;
      this.logger.logDebug(this.currentModule, "getAllCommentsOfKnownodeID " + knownodeId);
      queryParams = {
        'KN_ID': knownodeId
      };
      query = ['START root=node(*) ', 'MATCH (root) <-[r:COMMENT_OF*]- (comment) -[u:CREATED_BY]-> (commentUser)', 'WHERE root.KN_ID = {KN_ID} ', 'RETURN comment, r, commentUser'].join('\n');
      return this.queryAndFormatCommentResults(query, queryParams, _);
    };

    Comment.prototype.createNewComment = function(commentData, commentedObjectId, _) {
      var comment, commentedObject, properties;
      this.logger.logDebug(this.currentModule, "createNewComment " + commentedObjectId);
      comment = this.DB.Comment.create(commentData, _);
      this.relation.createOwnerRelationshipToNode(comment);
      properties = {
        creationDate: new Date()
      };
      commentedObject = this.neo4jDB.query("START node=node(*) WHERE node.KN_ID='" + commentedObjectId + "' RETURN node", _);
      this.relation.createRelation(comment, 'COMMENT_OF', commentedObject[0].node, properties, _);
      return comment;
    };

    Comment.prototype.createNewCommentToObjectId = function(commentData, commentedObjectId, _) {
      var commentedObject, queryParams;
      this.logger.logDebug(this.currentModule, "createNewCommentToObjectId " + commentedObjectId);
      queryParams = {
        where: {
          'KN_ID': commentedObjectId
        }
      };
      commentedObject = this.neo4jDB.getNodeById(commentedObjectId, _);
      return this.createNewComment(commentData, commentedObject, _);
    };

    return Comment;

  })(DBModule);

}).call(this);
