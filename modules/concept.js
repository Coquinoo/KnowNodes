// Generated by CoffeeScript 1.6.1

/*
* User: Liad Magen
* Date: 16/01/13
* Time: 00:30
*
* Concept represents a special type of knwonode Post which is a category or a concept in the system.
* It saves/displays the same way as a post - just that we use the type of concept
* and it lacks a files (for now).
* since it currently has a special meaning with a designated page, it gets its own API code. Lucky him.
*/


(function() {
  var Concept, DBModule, relationModule,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  relationModule = require('./relation');

  DBModule = require('./DBModule');

  module.exports = Concept = (function(_super) {

    __extends(Concept, _super);

    function Concept(user) {
      var _this = this;
      this.deleteConcept = function(conceptId, _) {
        return Concept.prototype.deleteConcept.apply(_this, arguments);
      };
      this.createNewConcept = function(conceptObject, _) {
        return Concept.prototype.createNewConcept.apply(_this, arguments);
      };
      this.getConceptById = function(nodeId, _) {
        return Concept.prototype.getConceptById.apply(_this, arguments);
      };
      this.getAllConcepts = function(_) {
        return Concept.prototype.getAllConcepts.apply(_this, arguments);
      };
      Concept.__super__.constructor.call(this, user);
      this.relation = new relationModule(user);
      this.currentModule = 'module/Concept';
    }

    Concept.prototype.getAllConcepts = function(_) {
      var conceptType, concepts, params;
      this.logger.logDebug(this.currentModule, "getAllConcepts");
      conceptType = this.DB.getPostTypes().concept;
      concepts = [];
      params = {
        where: {
          postType: conceptType
        }
      };
      this.DB.Post.all(params, _).forEach_(_, function(_, concept) {
        return concepts.push({
          id: concept.id,
          conceptId: concept.KN_ID,
          title: concept.title,
          content: concept.bodyText
        });
      });
      return concepts;
    };

    Concept.prototype.getUserConcepts = function(_) {
      var params, query;
      this.logger.logDebug(this.currentModule, "getUserConcepts");
      query = ['START user=node({userId})', 'MATCH (concept) -[:CREATED_BY]-> (user)', 'WHERE (concept.postType = "{conceptType}")', 'RETURN other'].join('\n');
      params = {
        userId: this.user.id,
        conceptType: this.DB.getPostTypes().concept
      };
      return this.neo4jDB.query(query, params, _);
    };

    Concept.prototype.getConceptById = function(nodeId, _) {
      var concept;
      this.logger.logDebug(this.currentModule, "getConceptById " + nodeId);
      concept = this.DB.Post.find(nodeId, _);
      return concept;
    };

    Concept.prototype.getConceptByKnownodeId = function(knownodeId, _) {
      var concept, params, returnConcept;
      this.logger.logDebug(this.currentModule, "getConceptByKnownodeId " + knownodeId);
      params = {
        where: {
          KN_ID: knownodeId
        }
      };
      concept = this.DB.Post.findOne(params, _);
      if (concept) {
        returnConcept = {
          id: concept.id,
          conceptId: concept.KN_ID,
          title: concept.title,
          bodyText: concept.bodyText
        };
        return returnConcept;
      } else {
        return null;
      }
    };

    Concept.prototype.createNewConcept = function(conceptObject, _) {
      var concept;
      this.logger.logDebug(this.currentModule, 'createNewConcept');
      conceptObject.postType = this.DB.getPostTypes().concept;
      concept = this.DB.Post.create(conceptObject, _);
      concept.index('kn_Post', 'KN_ID', concept.KN_ID, _);
      this.relation.createOwnerRelationship(concept);
      return concept;
    };

    Concept.prototype.deleteConcept = function(conceptId, _) {
      var concept;
      this.logger.logDebug(this.currentModule, "deleteConcept " + conceptId);
      concept = this.DB.Post.find(nodeId, _);
      return concept.destroy(_);
    };

    return Concept;

  })(DBModule);

}).call(this);
