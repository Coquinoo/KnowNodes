// Generated by CoffeeScript 1.6.1

/*
* User: Liad Magen
* Date: 16/01/13
* Time: 00:30
*
* Relation is for creating an EDGE, or a specific edge-node between two nodes in the system
*/


(function() {
  var DBModule, Relation,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DBModule = require('./DBModule');

  module.exports = Relation = (function(_super) {

    __extends(Relation, _super);

    function Relation(user) {
      Relation.__super__.constructor.call(this, user);
      this.currentModule = 'module/Relation';
    }

    /*
       createRelation expects two nodes (from, to) in Neo4J format ONLY
    */


    Relation.prototype.createRelation = function(from, relationshipType, to, properties, _) {
      this.logger.logDebug(this.currentModule, 'createRelation');
      if (to.__data && to.__data._node) {
        to = to.__data._node;
      }
      if (from.__data && from.__data._node) {
        from = from.__data._node;
      }
      this.logger.logDebug(this.currentModule, 'done. creating relation');
      from.createRelationshipTo(to, relationshipType, properties, _);
      return this.logger.logDebug(this.currentModule, 'created relation done.');
    };

    Relation.prototype.createOwnerRelationshipToNode = function(node, _) {
      var properties;
      this.logger.logDebug(this.currentModule, 'createOwnerRelationshipToNode');
      console.log('createOwnerRelationshipToNode: user is ' + this.user.id);
      properties = {
        creationDate: new Date()
      };
      return this.createRelation(node, 'CREATED_BY', this.user, properties, _);
    };

    Relation.prototype.getOwnerRelationship = function(node, _) {
      var nodes;
      this.logger.logDebug(this.currentModule, 'getOwnerRelationship');
      if (typeof node === 'number') {
        node = this.neo4jDB.getNodeById(node, _);
      }
      nodes = node.getRelationshipByType(node, 'CREATED_BY', _);
      if (nodes.length > 0) {
        return nodes[0];
      } else {
        return null;
      }
    };

    Relation.prototype.addKnownodeEdge = function(fromKnownode, connectionData, toKnownode, _) {
      var edge, relationshipData;
      this.logger.logDebug(this.currentModule, 'addKnownodeEdge');
      relationshipData = {
        creationDate: new Date()
      };
      connectionData.fromNodeId = fromKnownode.id;
      connectionData.toNodeId = toKnownode.id;
      this.logger.logDebug(this.currentModule, JSON.stringify(connectionData));
      edge = this.DB.Edge.create(connectionData, _);
      this.createOwnerRelationshipToNode(edge);
      this.logger.logDebug(this.currentModule, 'creating relations');
      this.createRelation(fromKnownode, 'RELATED_TO', edge, relationshipData, _);
      this.createRelation(edge, 'RELATED_TO', toKnownode, relationshipData, _);
      return edge;
    };

    return Relation;

  })(DBModule);

}).call(this);
