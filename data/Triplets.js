/*** Generated by streamline 0.6.0 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var Connections, GraphDB, Resources, Users;

  Connections = require("./Connections");

  Resources = require("./Resources");

  Users = require("./Users");

  Connections = require("./Connections");

  GraphDB = require("../DB/GraphDB");

  module.exports = {
    findByUserId: function findByUserId__1(userId, loggedUserId, _) { var item, loggedUser, nodes, params, query, results, toPush, user, _i, _len, _ref, _ref1; var __frame = { name: "findByUserId__1", line: 15 }; return __func(_, this, arguments, findByUserId__1, 2, __frame, function __$findByUserId__1() {

        nodes = [];
        return Users.find(userId, __cb(_, __frame, 3, 13, function ___(__0, __1) { user = __1; return (function __$findByUserId__1(__then) {
            if ((loggedUserId != null)) {
              return Users.find(loggedUserId, __cb(_, __frame, 5, 21, function ___(__0, __2) { loggedUser = __2; __then(); }, true)); } else {

              loggedUser = {
                node: {
                  id: 0 } }; __then(); } ; })(function __$findByUserId__1() {



            query = (("START connectionCreator=node({userNodeId}), user=node(" + loggedUser.node.id) + ")\nMATCH (connection) -[:CREATED_BY]- (connectionCreator),\n(startResource) -[:RELATED_TO]- (connection) -[:RELATED_TO]-> (endResource),\n(startResource) -[?:CREATED_BY]- (startResourceCreator),\n(endResource) -[?:CREATED_BY]- (endResourceCreator),\n(connection) -[?:COMMENT_OF]- (connectionComments),\n(connection) -[?:VOTED_UP]- (upvotes),\n(connection) -[?:VOTED_DOWN]- (downvotes),\n(user) -[hasVotedUp?:VOTED_UP]-> (connection),\n(user) -[hasVotedDown?:VOTED_DOWN]-> (connection),\n(startResourceOtherConnections)-[?:RELATED_TO]-(startResource),\n(endResourceOtherConnections)-[?:RELATED_TO]-(endResource)\nWHERE startResource <> endResource\nAND startResourceOtherConnections <> connection\nAND endResourceOtherConnections <> connection\nAND connection.nodeType = \"kn_Edge\"\nAND NOT(HAS(connection.status))\nRETURN connection, startResource, endResource, connectionCreator, startResourceCreator, endResourceCreator,\ncount(distinct connectionComments) AS commentCount,\ncount(distinct upvotes) AS upvoteCount,\ncount(distinct downvotes) AS downvoteCount,\ncount(distinct startResourceOtherConnections) AS startResourceOtherConnectionCount,\ncount(distinct endResourceOtherConnections) AS endResourceOtherConnectionCount,\nhasVotedUp, hasVotedDown");
            params = {
              userNodeId: user.node.id };

            return GraphDB.get().query(query, params, __cb(_, __frame, 17, 16, function ___(__0, __3) { results = __3;
              for (_i = 0, _len = results.length; (_i < _len); _i++) {
                item = results[_i];
                toPush = {
                  upvotes: item.upvoteCount,
                  downvotes: item.downvoteCount,
                  userUpvoted: item.hasVotedUp,
                  userDownvoted: item.hasVotedDown,
                  startResource: item.startResource.data,
                  endResource: item.endResource.data,
                  connection: item.connection.data };

                toPush.commentCount = item.commentCount;
                toPush.connection.creator = item.connectionCreator.data;
                if ((toPush.connection.status === "deleted")) {
                  toPush.connection.creator.firstName = "deleted";
                  toPush.connection.creator.lastName = " ";
                  toPush.connection.creator.KN_ID = "deleted";
                  toPush.connection.creator.dateOfBirth = "deleted";
                  toPush.connection.creator.email = "deleted";
                  toPush.connection.creator.email = "deleted";
                  toPush.connection.creator.password = "deleted"; } ;

                toPush.startResource.creator = (((_ref = item.startResourceCreator) != null) ? _ref.data : void 0);
                toPush.endResource.creator = (((_ref1 = item.endResourceCreator) != null) ? _ref1.data : void 0);
                toPush.startResource.connectionCount = item.startResourceOtherConnectionCount;
                toPush.endResource.connectionCount = item.endResourceOtherConnectionCount;
                nodes.push(toPush); };

              return _(null, nodes); }, true)); }); }, true)); }); },

    findByConnectionId: function findByConnectionId__2(connectionId, userId, _) { var connection, item, nodes, query, results, toPush, user, userNodeId, _i, _len, _ref, _ref1; var __frame = { name: "findByConnectionId__2", line: 63 }; return __func(_, this, arguments, findByConnectionId__2, 2, __frame, function __$findByConnectionId__2() {

        nodes = [];
        return Connections.find(connectionId, __cb(_, __frame, 3, 19, function ___(__0, __1) { connection = __1; return (function __$findByConnectionId__2(__then) {
            if ((userId != null)) {
              return Users.find(userId, __cb(_, __frame, 5, 15, function ___(__0, __2) { user = __2;
                userNodeId = user.node.id; __then(); }, true)); } else {

              userNodeId = 0; __then(); } ; })(function __$findByConnectionId__2() {

            query = (((("START connection=node(" + connection.node.id) + "), user=node(") + userNodeId) + ")\nMATCH (startResource) -[:RELATED_TO]-> (connection) -[:RELATED_TO]-> (endResource),\n(connection) -[:CREATED_BY]- (connectionCreator),\n(startResource) -[?:CREATED_BY]- (startResourceCreator),\n(endResource) -[?:CREATED_BY]- (endResourceCreator),\n(connection) -[?:COMMENT_OF]- (connectionComments),\n(connection) -[?:VOTED_UP]- (upvotes),\n(connection) -[?:VOTED_DOWN]- (downvotes),\n(user) -[hasVotedUp?:VOTED_UP]-> (connection),\n(user) -[hasVotedDown?:VOTED_DOWN]-> (connection),\n(startResourceOtherConnections)-[?:RELATED_TO]-(startResource),\n(endResourceOtherConnections)-[?:RELATED_TO]-(endResource)\nWHERE startResource <> endResource\nAND startResourceOtherConnections <> connection\nAND endResourceOtherConnections <> connection\nRETURN connection, startResource, endResource, startResourceCreator, endResourceCreator, connectionCreator,\ncount(distinct connectionComments) AS commentCount,\ncount(distinct upvotes) AS upvoteCount,\ncount(distinct downvotes) AS downvoteCount,\ncount(distinct startResourceOtherConnections) AS startResourceOtherConnectionCount,\ncount(distinct endResourceOtherConnections) AS endResourceOtherConnectionCount,\nhasVotedUp, hasVotedDown");
            return GraphDB.get().query(query, __cb(_, __frame, 11, 16, function ___(__0, __3) { results = __3;
              for (_i = 0, _len = results.length; (_i < _len); _i++) {
                item = results[_i];
                toPush = {
                  upvotes: item.upvoteCount,
                  downvotes: item.downvoteCount,
                  userUpvoted: item.hasVotedUp,
                  userDownvoted: item.hasVotedDown,
                  startResource: item.startResource.data,
                  endResource: item.endResource.data,
                  connection: item.connection.data };

                toPush.commentCount = item.commentCount;
                toPush.connection.creator = item.connectionCreator.data;
                if ((toPush.connection.status === "deleted")) {
                  toPush.connection.creator.firstName = "deleted";
                  toPush.connection.creator.lastName = " ";
                  toPush.connection.creator.KN_ID = "deleted";
                  toPush.connection.creator.dateOfBirth = "deleted";
                  toPush.connection.creator.email = "deleted";
                  toPush.connection.creator.email = "deleted";
                  toPush.connection.creator.password = "deleted"; } ;

                toPush.startResource.creator = (((_ref = item.startResourceCreator) != null) ? _ref.data : void 0);
                toPush.endResource.creator = (((_ref1 = item.endResourceCreator) != null) ? _ref1.data : void 0);
                toPush.startResource.connectionCount = item.startResourceOtherConnectionCount;
                toPush.endResource.connectionCount = item.endResourceOtherConnectionCount;
                nodes.push(toPush); };

              return _(null, nodes); }, true)); }); }, true)); }); } };



}).call(this);