/*** Generated by streamline 0.6.0 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var Connection, Error, OwnedEntities, Resource, ResourceValidator, Resources, Type, User, _ref, __hasProp = {
  }.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) { child[key] = parent[key]; }; }; function ctor() { this.constructor = child; }; ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OwnedEntities = require("./OwnedEntities");

  Type = require("./../model/Type");

  ResourceValidator = require("./../model/validation/ResourceValidator");

  Resource = require("./../model/Resource");

  Connection = require("./../model/Connection");

  Error = require("../error/Error");

  User = require("./../model/User");

  module.exports = Resources = (function(_super) {
    __extends(Resources, _super);

    function Resources() {
      _ref = Resources.__super__.constructor.apply(this, arguments);
      return _ref; };


    Resources.getNodeType = function() {
      return Type.RESOURCE; };


    Resources.wrap = function(node) {
      return new Resource(node); };


    Resources.searchByKeyword = function Resources_searchByKeyword__1(userQuery, _) { var cypherQuery, item, nodes, params, regex, results, _i, _len, __this = this; var __frame = { name: "Resources_searchByKeyword__1", line: 36 }; return __func(_, this, arguments, Resources_searchByKeyword__1, 1, __frame, function __$Resources_searchByKeyword__1() {

        nodes = [];
        cypherQuery = "START results=node(*)\nWhere has(results.title)\nand results.nodeType=\"kn_Post\"\nand results.title =~ {regex}\nRETURN results";
        regex = (("(?i).*" + userQuery) + ".*");
        params = {
          regex: regex };

        return __this.DB.query(cypherQuery, params, __cb(_, __frame, 8, 16, function ___(__0, __1) { results = __1;
          for (_i = 0, _len = results.length; (_i < _len); _i++) {
            item = results[_i];
            nodes.push(item.results.data); };

          return _(null, nodes); }, true)); }); };


    Resources.findByUrl = function Resources_findByUrl__2(url, _) { var __this = this; var __frame = { name: "Resources_findByUrl__2", line: 52 }; return __func(_, this, arguments, Resources_findByUrl__2, 1, __frame, function __$Resources_findByUrl__2() {
        return __this.findByTextProperty("url", url, __cb(_, __frame, 1, 13, _, true)); }); };


    Resources.findTripletsByResourceId = function Resources_findTripletsByResourceId__3(id, user, _) { var item, nodes, params, query, resource, results, toPush, userNodeId, _i, _len, _ref1, __this = this; var __frame = { name: "Resources_findTripletsByResourceId__3", line: 56 }; return __func(_, this, arguments, Resources_findTripletsByResourceId__3, 2, __frame, function __$Resources_findTripletsByResourceId__3() {

        nodes = [];
        if (user) {
          userNodeId = user.node.id; }
         else {
          userNodeId = 0; } ;

        query = (("START resource=node({resourceNodeId}), user=node(" + userNodeId) + ")\nMATCH (resource) -[:RELATED_TO]- (connection) -[:RELATED_TO]- (endResource),\nendResource -[?:CREATED_BY]- (endResourceCreator),\n(otherConnections)-[?:RELATED_TO]-(endResource),\n(connection) -[?:VOTED_UP]- (upvotes),\n(downvotes) -[?:VOTED_DOWN]- (connection),\n(connection) -[:CREATED_BY]- (connectionCreator),\n(user) -[hasVotedUp?:VOTED_UP]-> (connection),\n(user) -[hasVotedDown?:VOTED_DOWN]-> (connection),\n(connection) -[?:COMMENT_OF]- (comments)\nWHERE endResource <> resource\nAND otherConnections <> connection\nRETURN resource, endResource, endResourceCreator, connection, connectionCreator,\ncount(distinct comments) AS commentCount,\ncount(distinct otherConnections) AS endResourceConnectionCount,\ncount(distinct connection)-1 AS startResourceConnectionCount,\ncount(distinct upvotes) AS upVoteCount,\ncount(distinct downvotes) AS downVoteCount,\nhasVotedUp, hasVotedDown");
        return __this.find(id, __cb(_, __frame, 9, 17, function ___(__0, __1) { resource = __1;
          params = {
            resourceNodeId: resource.node.id };

          return __this.DB.query(query, params, __cb(_, __frame, 13, 16, function ___(__0, __2) { results = __2;
            for (_i = 0, _len = results.length; (_i < _len); _i++) {
              item = results[_i];
              toPush = {
                upvotes: item.upVoteCount,
                downvotes: item.downVoteCount,
                userUpvoted: item.hasVotedUp,
                userDownvoted: item.hasVotedDown,
                startResource: item.resource.data,
                endResource: item.endResource.data,
                connection: item.connection.data,
                commentCount: item.commentCount };

              toPush.startResource.connectionCount = item.startResourceConnectionCount;
              toPush.endResource.connectionCount = item.endResourceConnectionCount;
              toPush.endResource.creator = (((((_ref1 = item.endResourceCreator) != null) ? _ref1.data : void 0)) != null);
              toPush.connection.creator = item.connectionCreator.data;
              if ((toPush.connection.status === "deleted")) {
                toPush.connection.creator.firstName = "deleted";
                toPush.connection.creator.lastName = " ";
                toPush.connection.creator.KN_ID = "deleted";
                toPush.connection.creator.dateOfBirth = "deleted";
                toPush.connection.creator.email = "deleted";
                toPush.connection.creator.email = "deleted";
                toPush.connection.creator.password = "deleted"; } ;

              nodes.push(toPush); };

            return _(null, nodes); }, true)); }, true)); }); };


    return Resources;

  })(OwnedEntities);

}).call(this);