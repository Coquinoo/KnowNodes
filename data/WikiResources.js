/*** Generated by streamline 0.6.0 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; (function() {
  var Error, Resources, Type, Users;

  Resources = require("./Resources");

  Users = require("./Users");

  Type = require("../model/Type");

  Error = require("../error/Error");

  module.exports = {
    makeWikipediaUrl: function(title) {
      return ("http://en.wikipedia.org/wiki/" + title.replace(/\ /g, "_")); },

    findOrCreate: function findOrCreate__1(title, userId, _) { var creator, data, error, url, __this = this; var __frame = { name: "findOrCreate__1", line: 16 }; return __func(_, this, arguments, findOrCreate__1, 2, __frame, function __$findOrCreate__1() {

        url = __this.makeWikipediaUrl(title); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$findOrCreate__1() {

              return Resources.findByUrl(url, __cb(_, __frame, 4, 15, _, true)); }); })(function ___(_error, __result) { __tryCatch(_, function __$findOrCreate__1() { if (_error) {

                error = _error; return (function __$findOrCreate__1(__then) {
                  if ((error.isCustom && (error.type === Error.Type.NOT_FOUND))) {
                    data = {
                      title: title,
                      url: url,
                      resourceType: Type.WIKIPEDIA_ARTICLE };

                    return Users.find(userId, __cb(_, __frame, 13, 20, function ___(__0, __1) { creator = __1;
                      return Resources.create(data, creator, __cb(_, __frame, 14, 17, _, true)); }, true)); } else {

                    return _(error); } ; })(__then); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); }); },



    findByTitle: function findByTitle__2(title, _) { var url, __this = this; var __frame = { name: "findByTitle__2", line: 36 }; return __func(_, this, arguments, findByTitle__2, 1, __frame, function __$findByTitle__2() {

        url = __this.makeWikipediaUrl(title);
        return Resources.findByUrl(url, __cb(_, __frame, 3, 13, _, true)); }); } };



}).call(this);