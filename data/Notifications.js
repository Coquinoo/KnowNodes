/*** Generated by streamline 0.6.0 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var Error, GraphDB, Notification, Resources, Triplets, Type, User, __indexOf = ([].indexOf || function(item) {
    for (var i = 0, l = this.length; (i < l); i++) { if (((i in this) && (this[i] === item))) { return i }; }; return -1; });

  Notification = require("../model/Notification");

  Triplets = require("./Triplets");

  Resources = require("./Resources");

  Type = require("../model/Type");

  GraphDB = require("../DB/GraphDB");

  User = require("../model/User");

  Error = require("../error/Error");

  module.exports = {
    findByNotifiedUserId: function findByNotifiedUserId__1(notifiedUserId, _) { var __frame = { name: "findByNotifiedUserId__1", line: 20 }; return __func(_, this, arguments, findByNotifiedUserId__1, 1, __frame, function __$findByNotifiedUserId__1() {
        return Notification.find({
          notifiedUserId: notifiedUserId }, __cb(_, __frame, 1, 13, _, true)); }); },


    create: function(data) {
      var notification;
      notification = new Notification(data);
      notification.save(function(error) {
        if ((error != null)) {
          return console.log("ERROR : Notifications.create() - ", error); } ; });


      return notification; },

    notifyConnectionUpvoted: function notifyConnectionUpvoted__2(connection, actor, _) { var notifiedUser, triplet, __this = this; var __frame = { name: "notifyConnectionUpvoted__2", line: 35 }; return __func(_, this, arguments, notifyConnectionUpvoted__2, 2, __frame, function __$notifyConnectionUpvoted__2() {

        return connection.getCreator(__cb(_, __frame, 2, 21, function ___(__0, __1) { notifiedUser = __1;
          connection.checkNodeType(Type.CONNECTION);
          return Triplets.findByConnectionId(connection.id, null, __cb(_, __frame, 4, 16, function ___(__0, __2) { triplet = __2;
            triplet.type = Type.TRIPLET;
            return _(null, __this.create({
              notifiedUserId: notifiedUser.id,
              actor: {
                id: actor.id,
                name: actor.fullName },

              action: Notification.Action.UPVOTED,
              target: triplet })); }, true)); }, true)); }); },


    notifyConnectionCreated: function notifyConnectionCreated__3(startResource, endResource, connection, actor, _) { var element, ids, result1, result2, user, usersToNotify, _i, _j, _k, _len, _len1, _len2, _ref, __this = this; var __frame = { name: "notifyConnectionCreated__3", line: 51 }; return __func(_, this, arguments, notifyConnectionCreated__3, 4, __frame, function __$notifyConnectionCreated__3() {

        startResource.checkNodeType(Type.RESOURCE);
        endResource.checkNodeType(Type.RESOURCE);
        ids = [];
        usersToNotify = [];
        return __this.getNotifiedUsersForConnectedResource(startResource, __cb(_, __frame, 6, 16, function ___(__0, __1) { result1 = __1;
          return __this.getNotifiedUsersForConnectedResource(endResource, __cb(_, __frame, 7, 16, function ___(__0, __2) { result2 = __2;
            for (_i = 0, _len = result1.length; (_i < _len); _i++) {
              element = result1[_i];
              user = new User(element.userToNotify);
              ids.push(user.id);
              user.notifiedFor = startResource;
              usersToNotify.push(user); };

            for (_j = 0, _len1 = result2.length; (_j < _len1); _j++) {
              element = result2[_j];
              user = new User(element.userToNotify);
              if (_ref = user.id, (__indexOf.call(ids, _ref) < 0)) {
                ids.push(user.id);
                user.notifiedFor = endResource;
                usersToNotify.push(user); } ; };


            for (_k = 0, _len2 = usersToNotify.length; (_k < _len2); _k++) {
              user = usersToNotify[_k];
              __this.create({
                notifiedUserId: user.id,
                actor: {
                  id: actor.id,
                  name: actor.fullName },

                action: Notification.Action.CONNECTED,
                target: user.notifiedFor.node._data.data }); };


            return _(null, connection); }, true)); }, true)); }); },

    getNotifiedUsersForConnectedResource: function getNotifiedUsersForConnectedResource__4(resource, _) { var query; var __frame = { name: "getNotifiedUsersForConnectedResource__4", line: 89 }; return __func(_, this, arguments, getNotifiedUsersForConnectedResource__4, 1, __frame, function __$getNotifiedUsersForConnectedResource__4() {

        query = (("START resource=node(" + resource.node.id) + ")\nMATCH resource-[?:CREATED_BY]-userToNotify,\nresource-[?:RELATED_TO]-connection-[?:CREATED_BY]-userToNotify\nRETURN distinct userToNotify");
        return GraphDB.get().query(query, __cb(_, __frame, 3, 13, _, true)); }); } };



}).call(this);